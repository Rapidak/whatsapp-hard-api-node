<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/styles.css">

  <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css"> -->
  <style>
    .profile-img {
      width: 50px;
      height: 50px;
      object-fit: cover;
    }
  </style>



</head>

<body>

  <nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/img/logo.png" alt="Logo" width="30" height="30" class="me-2">
        AK Automation
      </a>
      <p class="text-light m-0 ms-3">Hi, <%= user.username %>
      </p>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item"><a class="nav-link" href="/manager/dashboard">Dashboard</a></li>
          <li class="nav-item"><a class="nav-link" href="/manager/settings">Settings</a></li>
          <li class="nav-item"><a class="nav-link" href="/manager/reports">Reports</a></li>
          <li class="nav-item"><a class="nav-link" href="/manager/helps">Help</a></li>
          <li class="nav-item"><a class="nav-link text-danger" href="/manager/logout">Logout</a></li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container-fluid">
    <div class="row">
      <nav class="col-md-3 col-lg-2 d-md-block sidebar">
        <div class="position-sticky pt-3">
          <ul class="nav flex-column">
            <li class="nav-item">
              <a class="nav-link <%= page === 'user/home' ? 'active' : '' %>" href="/manager/dashboard">Dashboard</a>
            </li>
            <li class="nav-item">
              <a class="nav-link <%= page === 'user/settings' ? 'active' : '' %>" href="/manager/settings">Settings</a>
            </li>
            <li class="nav-item">
              <a class="nav-link <%= page === 'user/reports' ? 'active' : '' %>" href="/manager/reports">Reports</a>
            </li>
            <li class="nav-item">
              <a class="nav-link <%= page === 'user/helps' ? 'active' : '' %>" href="/manager/helps">Help</a>
            </li>
          </ul>
        </div>
      </nav>

      <main class="col-md-16 ms-sm-auto col-lg-10 px-md-4">
        <div class="d-flex justify-content-between flex-wrap align-items-center py-3 mb-4 border-bottom">
          <h1 class="text-center">Instance Management</h1>
        </div>
        <div class="main-content">
          <div class="container mt-5">
            <button class="btn btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#instanceModal">Create
              Instance</button>
            <button id="listInstance" class="btn btn-primary mb-3">List Instances</button>
          </div>

          <div class="modal fade" id="instanceModal" tabindex="-1" aria-labelledby="exampleModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content modelbgc">
                <div class="modal-header">
                  <h5 class="modal-title" id="exampleModalLabel">New Instance</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" data-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                  <form id="instanceForm" onsubmit="return submitForm(event)">
                    <div class="form-group">
                      <label for="key">Key</label>
                      <div class="input-group">
                        <input type="text" class="form-control" id="key" maxlength="25" value="" required>
                        <div class="input-group-append">
                          <button class="btn btn-outline-secondary" type="button" id="generateKeyButton">
                            <i class="navbar-toggler-icon">Gen</i>
                          </button>
                        </div>
                      </div>
                    </div>
                    <div class="form-group">
                      <label for="browser">Browser</label>
                      <input type="text" class="form-control" id="browser" value="Ubuntu" maxlength="25" required>
                    </div>
                    <div class="form-group">
                      <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" id="webhook">
                        <label class="custom-control-label" for="webhook">Webhook</label>
                      </div>

                    </div>
                    <div id="webhookOptions" style="display: none;">
                      <div class="form-group">
                        <label for="webhookUrl">Webhook URL</label>
                        <input type="text" class="form-control" id="webhookUrl" value="">
                      </div>
                      <div class="form-group">
                        <label>Webhook Events</label><br>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="connection.update" id="event1">
                          <label class="form-check-label" for="event1">connection.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="qrCode.update" id="event2">
                          <label class="form-check-label" for="event2">qrCode.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="presence.update" id="event3">
                          <label class="form-check-label" for="event3">presence.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="contacts.upsert" id="event4">
                          <label class="form-check-label" for="event4">contacts.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="chats.upsert" id="event5">
                          <label class="form-check-label" for="event5">chats.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="chats.delete" id="event6">
                          <label class="form-check-label" for="event6">chats.delete</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="messages.update" id="event7">
                          <label class="form-check-label" for="event7">messages.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="messages.upsert" id="event8" checked>
                          <label class="form-check-label" for="event8">messages.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="call.events" id="event9">
                          <label class="form-check-label" for="event9">call.events</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="groups.upsert" id="event10">
                          <label class="form-check-label" for="event10">groups.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="groups.update" id="event11">
                          <label class="form-check-label" for="event11">groups.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="group-participants.update"
                            id="event12">
                          <label class="form-check-label" for="event12">group-participants.update</label>
                        </div>


                        <div class="form-check custom-switch">
                          <input type="checkbox" class="form-check-input" id="base64" checked>
                          <label class="custom-control-label" for="base64">Receive files in
                            base64</label>
                        </div>
                      </div>
                    </div>
                    <div class="form-group">
                      <label>Grupos:</label><br>
                      <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" id="ignoreGroups" checked>
                        <label class="custom-control-label" for="ignoreGroups">Ignore group messages
                          and
                          events</label>
                      </div>
                    </div>
                    <div class="form-group">
                      <label>Messages:</label><br>
                      <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" id="messagesRead">
                        <label class="custom-control-label" for="messagesRead">Read received
                          messages</label>
                      </div>
                    </div>
                    <br>
                    <button type="submit" style="width:100%" class="btn btn-primary">To send</button>
                  </form>
                </div>
              </div>
            </div>
          </div>



          <div class="container mt-5">
            <div id="stats" class="mb-3">
              <p>Total: <span id="total">0</span></p>
              <p>Connected: <span id="connected">0</span></p>
              <p>Disconnected: <span id="disconnected">0</span></p>
            </div>
            <div id="data" class="row"></div>
          </div>


          <div class="modal fade" id="editInstanceModal" tabindex="-1" aria-labelledby="editModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="editModalLabel">Edit Instance</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" data-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                  <form id="editInstanceForm" onsubmit="return submitEditForm(event)">
                    <div class="form-group">
                      <label for="editKey">Key</label>
                      <div class="input-group">
                        <input type="text" class="form-control" id="editKey" maxlength="25" disabled required>

                      </div>
                    </div>
                    <div class="form-group">
                      <label for="editBrowser">Browser</label>
                      <input type="text" class="form-control" id="editBrowser" maxlength="25" required>
                    </div>
                    <div class="form-group">
                      <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" id="editWebhook">
                        <label class="custom-control-label" for="editWebhook">Webhook</label>
                      </div>
                    </div>
                    <div id="editWebhookOptions" style="display: none;">
                      <div class="form-group">
                        <label for="editWebhookUrl">Webhook URL</label>
                        <input type="text" class="form-control" id="editWebhookUrl">
                      </div>
                      <div class="form-group">
                        <label>Webhook Events</label><br>
                        <!-- Lista completa dos eventos -->
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="messages.upsert" id="editEvent1">
                          <label class="form-check-label" for="editEvent1">messages.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="messages.update" id="editEvent2">
                          <label class="form-check-label" for="editEvent2">messages.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="connection.update" id="editEvent3">
                          <label class="form-check-label" for="editEvent3">connection.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="qrCode.update" id="editEvent4">
                          <label class="form-check-label" for="editEvent4">qrCode.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="presence.update" id="editEvent5">
                          <label class="form-check-label" for="editEvent5">presence.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="contacts.upsert" id="editEvent6">
                          <label class="form-check-label" for="editEvent6">contacts.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="chats.upsert" id="editEvent7">
                          <label class="form-check-label" for="editEvent7">chats.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="chats.delete" id="editEvent8">
                          <label class="form-check-label" for="editEvent8">chats.delete</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="call.events" id="editEvent9">
                          <label class="form-check-label" for="editEvent9">call.events</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="groups.upsert" id="editEvent10">
                          <label class="form-check-label" for="editEvent10">groups.upsert</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="groups.update" id="editEvent11">
                          <label class="form-check-label" for="editEvent11">groups.update</label>
                        </div>
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" value="group-participants.update"
                            id="editEvent12">
                          <label class="form-check-label" for="editEvent12">group-participants.update</label>
                        </div>
                      </div>
                      <div class="form-check custom-switch">
                        <input type="checkbox" class="form-check-input" id="editBase64">
                        <label class="custom-control-label" for="editBase64">Receive files in
                          base64</label>
                      </div>
                    </div>
                    <div class="form-group">
                      <label>Grupos:</label><br>
                      <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" id="editIgnoreGroups">
                        <label class="custom-control-label" for="editIgnoreGroups">Ignore group
                          messages
                          and events</label>
                      </div>
                    </div>
                    <div class="form-group">
                      <label>Message:</label><br>
                      <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" id="editMessagesRead">
                        <label class="custom-control-label" for="editMessagesRead">Read received
                          messages</label>
                      </div>
                    </div>
                    <br>
                    <button type="submit" style="width:100%" class="btn btn-primary">Save</button>
                  </form>
                </div>
              </div>
            </div>
          </div>

          <div id="myModal" class="modal fade">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">QR Code</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" data-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                  <div id="qrcode" style="text-align: center"></div>
                </div>
              </div>
            </div>
          </div>


          <div class="modal fade" id="delayInstanceModal" tabindex="-1" aria-labelledby="delayModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="delayModalLabel">Set Delay</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <form id="instanceDelayForm" onsubmit="submitDelayForm(event)">
                    <div class="mb-3">
                      <label for="delayToken" class="form-label">Delay Token</label>
                      <div class="input-group">
                        <input type="text" class="form-control" id="delayToken" name="delayToken" required
                          placeholder="Enter delay in message's/hour">
                      </div>
                    </div>
                    <div class="mb-3">
                      <label for="delay" class="form-label">Delay (message's/hour)</label>
                      <div class="input-group">
                        <input type="number" class="form-control" id="delay" name="delay" required
                          placeholder="Enter delay in message's/hour">
                      </div>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                      <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>

          <div class="modal fade" id="messageInstanceModal" tabindex="-1" aria-labelledby="messageModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="messageModalLabel">Message Sender</h5>
                  <input type="hidden" id="tokenId" name="tokenId">
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <form id="instanceWiseMessage" onsubmit="submitLoadMessage(event)">
                    <div class="mb-3">
                      <label for="mobileNumber" class="form-label">Mobile Number</label>
                      <div class="input-group">
                        <input type="text" class="form-control" id="mobileNumber" name="mobileNumber" required
                          placeholder="Enter Mobile Number with country code">
                      </div>
                    </div>
                    <div class="mb-3">
                      <label for="textMessage" class="form-label">Message</label>
                      <div class="input-group">
                        <input type="text" class="form-control" id="textMessage" name="textMessage" required
                          placeholder="Enter Message">
                      </div>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                      <button type="submit" class="btn btn-primary">Send Message</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>

          <script>
            // Toggle Webhook Options
            document.getElementById('webhook').addEventListener('change', function () {
              const webhookOptions = document.getElementById('webhookOptions');
              webhookOptions.style.display = this.checked ? 'block' : 'none';
            });


            function generateRandomKey() {
              const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
              let result = '';
              const length = 25;
              for (let i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() * characters.length));
              }
              return result;
            }

            // Generate Random Key
            document.getElementById('generateKeyButton').addEventListener('click', function () {
              const keyInput = document.getElementById('key');
              keyInput.value = generateRandomKey();
            });

            // Handle Form Submission
            function submitForm(event) {
              event.preventDefault();

              // Gather Form Data
              const instanceData = {
                key: document.getElementById('key').value,
                browser: document.getElementById('browser').value,
                webhook: document.getElementById('webhook').checked,
                webhookUrl: document.getElementById('webhookUrl').value,
                webhookEvents: Array.from(document.querySelectorAll('#webhookOptions input[type="checkbox"]:checked'))
                  .map(el => el.value),
                ignoreGroups: document.getElementById('ignoreGroups').checked,
                messagesRead: document.getElementById('messagesRead').checked
              };

              (async () => {
                try {
                  const response = await fetch('/manager/users/instances', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(instanceData),
                  });
                  console.log(response)
                  if (response.ok) {
                    const result = await response.json();
                    alert('Instance created successfully!');
                  } else {
                    alert(`Error creating instance: Limit reached! Cannot add more instances. ${response.statusText}`);
                  }
                } catch (error) {
                  alert(`Unexpected error: ${error.message}`);
                }
              })();
              listdata()
              // Close Modal
              const modal = bootstrap.Modal.getInstance(document.getElementById('instanceModal'));
              modal.hide();
              // Reset Form
              document.getElementById('instanceForm').reset();
              document.getElementById('webhookOptions').style.display = 'none';
            }
            window.load = listdata();


            async function listdata() {
              try {
                // Fetch instance list
                const instanceResponse = await fetch('/manager/users/instancesList', {
                  method: 'GET',
                  headers: { 'Content-Type': 'application/json' }
                });
                if (!instanceResponse.ok) throw new Error("Failed to fetch instance list.");
                const instanceData = await instanceResponse.json();

                // Clear existing data
                document.getElementById("data").innerHTML = '';
                const total = instanceData.data.length;
                let connected = 0, disconnected = 0;

                if (total > 0) {
                  instanceData.data.forEach(async (item) => { // Make this async for fetching profile
                    if (item.phone_connected) connected++;
                    else disconnected++;

                    const instanceKey = item.instance_key.substring(0, 25);
                    const phoneStatus = item.phone_connected
                      ? '<span class="badge bg-success">Online</span>'
                      : '<span class="badge bg-danger">Offline</span>';
                    const webhookStatus = item.webhook
                      ? '<span class="badge bg-success">Enabled</span>'
                      : '<span class="badge bg-danger">Disabled</span>';
                    const phoneNumber = item.phone_connected
                      ? item.user.id.split(':')[0]
                      : '<small>Disconnected</small>';

                    const card = document.createElement("div");
                    card.className = "col-md-4 mb-3";
                    card.innerHTML = `
                    <div class="card" style="background-color: #98d9db;">
                        <div class="card-body">
                            <div class="d-flex align-items-start">
                                ${item.phone_connected ? `
                                    <div class="profile-wrapper">
                                        <img src="/img/noimage.jpg" class="img-fluid rounded-circle profile-img me-3" alt="Profile Image">
                                    </div>` : ''}
                                <div>
                                    <h5 class="card-title">${instanceKey}</h5>
                                    <p class="card-text">Phone Connected: ${phoneStatus}</p>
                                    <p class="card-text">Webhook: ${webhookStatus}</p>
                                    <p class="card-text">Number: ${phoneNumber}</p>
                                </div>
                            </div>
                            <div class="mt-3 text-center">
                                <button class="btn btn-outline-dark mb-2" onclick="edit('${item.instance_key}')"><i class="fas fa-edit"></i> Edit</button>
                                <button class="btn btn-outline-danger mb-2" onclick="InstanceDelay('${item.instance_key}')"><i class="fas fa-add"></i>Delay</button>
                                <button class="btn btn-outline-dark mb-2" onclick="deleteInstance('${item.instance_key}')"><i class="fas fa-trash-alt"></i> Delete</button>
                                ${item.phone_connected ? `
                                    <button class="btn btn-outline-dark mb-2" onclick="sendMessage('${item.instance_key}')"><i class="fas fa-paper-plane"></i> Send Message</button>
                                    <button class="btn btn-outline-dark mb-2" onclick="disconnect('${item.instance_key}')"><i class="fas fa-power-off"></i> Disconnect</button>` : `
                                    <button class="btn btn-outline-dark mb-2" onclick="connectAppliance('${item.instance_key}')"><i class="fas fa-qrcode"></i> Connect</button>`}
                            </div>
                        </div>
                    </div>`;

                    document.getElementById("data").appendChild(card);

                    // Fetch profile image if phone is connected
                    if (item.phone_connected) {
                      const profileImg = card.querySelector(".profile-img");
                      try {
                        const profileResponse = await fetch(`/misc/downProfile?key=${item.instance_key}`, {
                          method: "POST",
                          headers: { "Content-Type": "application/json" },
                          body: JSON.stringify({ id: phoneNumber + "@s.whatsapp.net" })
                        });

                        if (profileResponse.ok) {
                          const profileData = await profileResponse.json();
                          if (profileData.data) {
                            profileImg.src = profileData.data;
                          }
                        }
                      } catch (error) {
                        console.error("Error fetching profile image:", error);
                      }
                    }
                  });

                  document.getElementById("total").innerText = total;
                  document.getElementById("connected").innerText = connected;
                  document.getElementById("disconnected").innerText = disconnected;

                  console.log('Data listed successfully.');
                } else {
                  console.log('No matching instances found.');
                }
              } catch (error) {
                console.error("Error in listdata:", error);
                console.log("Failed to fetch data.");
              }
            }

            document.getElementById("listInstance").addEventListener("click", listdata);


            const edit = async (instanceKey) => {
              try {
                const response = await fetch(`/instance/info?key=${instanceKey}`);
                const data = await response.json();

                if (data.error) {
                  console.log(data.message);
                  return;
                }

                const instance = data.instance_data;
                document.getElementById('editKey').value = instance.instance_key;
                document.getElementById('editBrowser').value = instance.browser;
                document.getElementById('editWebhook').checked = instance.webhook;
                document.getElementById('editWebhookUrl').value = instance.webhookUrl || '';
                document.getElementById('editBase64').checked = instance.base64;
                document.getElementById('editIgnoreGroups').checked = instance.ignoreGroups;
                document.getElementById('editMessagesRead').checked = instance.messagesRead;

                instance.webhookEvents.forEach((event) => {
                  const eventCheckbox = document.querySelector(`#editEvent${event}`);
                  if (eventCheckbox) eventCheckbox.checked = true;
                });

                console.log(instance);
                toggleEditWebhookOptions();
                const modalElement = document.getElementById('editInstanceModal');
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
              } catch (error) {
                console.error('Error fetching instance data:', error);
                console.log('Unexpected error, please try again.');
              }
            };

            const toggleEditWebhookOptions = () => {
              const webhookChecked = document.getElementById('editWebhook').checked;
              document.getElementById('editWebhookOptions').style.display = webhookChecked ? 'block' : 'none';
            };

            document.getElementById('editWebhook').addEventListener('change', function () {
              const webhookOptions = document.getElementById('editWebhookOptions');
              webhookOptions.style.display = this.checked ? 'block' : 'none';
            })


            const submitEditForm = async (event) => {
              event.preventDefault();
              const key = document.getElementById('editKey').value;
              const browser = document.getElementById('editBrowser').value;
              const webhookUrl = document.getElementById('editWebhookUrl').value;
              const webhook = document.getElementById('editWebhook').checked;
              const base64 = document.getElementById('editBase64').checked;
              const ignoreGroups = document.getElementById('editIgnoreGroups').checked;
              const messagesRead = document.getElementById('editMessagesRead').checked;

              if (!key || !browser || (webhook && !webhookUrl)) {
                console.log('Webhook URL cannot be empty.');
                return;
              }

              const webhookEvents = [];
              for (let i = 1; i <= 12; i++) {
                const checkbox = document.getElementById(`editEvent${i}`);
                if (checkbox && checkbox.checked) {
                  webhookEvents.push(checkbox.value);
                }
              }

              const data = {
                key,
                browser,
                webhook,
                base64,
                webhookUrl,
                webhookEvents,
                ignoreGroups,
                messagesRead,
              };

              try {
                const response = await fetch(`/instance/edit`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(data),
                });

                const result = await response.json();

                if (result.error) {
                  console.log(result.message);
                } else {
                  console.log('Instance updated successfully.');
                  $('#editInstanceModal').modal('hide');
                  listdata();
                }
              } catch (error) {
                console.error('Error updating instance:', error);
                console.log('Unexpected error, please try again.');
              }
            };



            const connectAppliance = async (instanceValue) => {
              try {
                const response = await fetch(`/instance/qrbase64?key=${instanceValue}`);
                const data = await response.json();

                // If the device is already connected
                if (data.error) {
                  const modalElement = document.getElementById('myModal');
                  const modal = bootstrap.Modal.getInstance(modalElement);
                  modal?.hide();
                  toastr.warning('telephone connected..');
                } else {
                  // Show the modal and start generating the QR code
                  const qrCodeElement = document.getElementById('qrcode');
                  qrCodeElement.textContent = 'Gerando QR code..';

                  const modalElement = document.getElementById('myModal');
                  const modal = new bootstrap.Modal(modalElement);
                  modal.show();

                  // Call atualizarQRCode every 4 seconds to update the QR code
                  intervalId = setInterval(() => updateQRCode(instanceValue), 4000);
                }
              } catch (error) {
                console.error('Error connecting device:', error);
              }
            };

            const updateQRCode = async (instanceValue) => {
              try {
                const response = await fetch(`/instance/qrbase64?key=${instanceValue}`);
                const data = await response.json();
                if (data.error) {
                  const modalElement = document.getElementById('myModal');
                  const modal = bootstrap.Modal.getInstance(modalElement);
                  modal?.hide();

                  console.log('Whatsapp connected!');
                  clearInterval(intervalId);
                  listdata(); 
                } else {
                 const qrCodeElement = document.getElementById('qrcode');
                  qrCodeElement.innerHTML = ''; 
                  const img = new Image();
                  img.src = data.qrcode; 
                  qrCodeElement.appendChild(img); 
                }
              } catch (error) {
                console.error('Error updating QR code:', error);
              }
            };

            function InstanceDelay(instanceKey) {
              const modalElement = document.getElementById('delayInstanceModal');
              const delayToken = document.getElementById('delayToken')
              delayToken.value = instanceKey ? instanceKey : '';
              const modal = new bootstrap.Modal(modalElement);
              modal.show();
            };


            function submitDelayForm(event) {
              event.preventDefault();
              const delayToken = document.getElementById('delayToken').value;
              const delay = document.getElementById('delay').value;
              if (!delayToken || !delay) {
                alert('Please fill in all fields');
                return;
              }
              const formData = {
                Token_Id: delayToken,
                toDelay: delay
              };
              fetch('/manager/set_delay', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
              })
                .then(response => response.json())
                .then(data => {
                  if (data.success) {
                    alert('Delay has been set successfully');
                    const modal = new bootstrap.Modal(document.getElementById('delayInstanceModal'));
                    modal.hide();
                    document.getElementById('instanceDelayForm').reset();
                  } else {
                    alert('Error setting delay. Please try again.');
                  }
                })
                .catch(error => {
                  alert('Something went wrong. Please try again later.');
                });
            }


            async function deleteInstance(instanceKey) {
              try {
                const instance_data = { key: instanceKey }; 
                const response = await fetch('/manager/users/deleteInstance', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(instance_data), // Fixed variable name
                });

                if (!response.ok) {
                  alert(`Error deleting instance: ${response.statusText} (${response.status})`)
                  throw new Error(`Error deleting instance: ${response.statusText} (${response.status})`);
                }
                const result = await response.json();
                alert(`Instance Deleted: ${result.message}`);
                return result; // Return response data if needed
              } catch (error) {
                console.error('Unexpected error:', error);
              }
            }


            function sendMessage(instanceKey) {
              const modalElement = document.getElementById('messageInstanceModal');
              const tokenIdInput = document.getElementById('tokenId');
              tokenIdInput.value = instanceKey || '';
              const modal = new bootstrap.Modal(modalElement);
              modal.show();
            }

            function submitLoadMessage(event) {
              event.preventDefault();
              const mobileNumber = document.getElementById('mobileNumber').value;
              const textMessage = document.getElementById('textMessage').value;
              const tokenId = document.getElementById('tokenId').value;

              if (!mobileNumber || !textMessage) {
                alert('Please fill in all fields');
                return;
              }

              const formData = {
                "id": mobileNumber,
                "tokenId": tokenId,
                "typeId": "user",
                "message": textMessage,
                "options": {
                  "delay": 0,
                  "replyFrom": ""
                },
                "groupOptions": {
                  "markUser": "ghostMention"
                }
              };

              fetch('/manager/messages/text', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
              })
                .then(response => response.json()) // Handle response properly
                .then(data => {
                  console.log('Message sent:', data);
                  alert('Message sent successfully!');
                  const modalElement = document.getElementById('messageInstanceModal');
                  const modal = bootstrap.Modal.getInstance(modalElement);
                  modal.hide();
                })
                .catch(error => {
                  console.error('Error sending message:', error);
                  alert('Failed to send message. Try again.');
                });
            }

            /**Logout Instance */
            async function disconnect(instanceKey) {
              try {
                const response = await fetch(`/instance/logout?key=${instanceKey}`);
                const data = await response.json();
                console.log(data);
                // if (data.error) {
                //   toastr.error(data.message);
                // } else {
                //   toastr.success(data.message);
                // }
              } catch (error) {
                console.error('Error disconnecting instance:', error);
              }
            }


          </script>

        </div>
      </main>
    </div>
  </div>




  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>